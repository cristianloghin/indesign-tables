#targetengine "session";app.doScript(main, ScriptLanguage.JAVASCRIPT, undefined, UndoModes.ENTIRE_SCRIPT, "Remove Local Table Overrides");function changeUnitsToPoints(){	if ( typeof originalUnitsH === 'undefined' )	{		originalUnitsH = app.documents[0].viewPreferences.horizontalMeasurementUnits;	}	if ( typeof originalUnitsV === 'undefined' )	{		originalUnitsV = app.documents[0].viewPreferences.verticalMeasurementUnits;	} 	app.documents[0].viewPreferences.horizontalMeasurementUnits = app.documents[0].viewPreferences.verticalMeasurementUnits = MeasurementUnits.points;}function changeUnitsBack(){	app.documents[0].viewPreferences.horizontalMeasurementUnits = originalUnitsH;	app.documents[0].viewPreferences.verticalMeasurementUnits = originalUnitsV;	delete originalUnitsH;	delete originalUnitsV;}function main(){	// check if "Header" style exist, create if not and assign	try	{		if ( saveSettings.checkedState )		{			// if the script ran before and the save settings box is checked			t_style_index = tableStyle.selectedIndex; // table style			acc_col_width = accColWidth.editValue; // accounts column width			all_col_width = allColWidth.checkedState; // make all columns of equal width			custom_colwidths = customColWidths.editContents; // custom column widths -> not set			h_depth = headerDepth.editValue; // how many rows deep is the header			e_row_index = emptyRowSettings.selectedIndex; // assign empty rows cell style			s_settings = saveSettings.checkedState; // save settings		}	}	catch (myError)	{		// if the script is run for the first time assign default values		t_style_index = 0; // table style -> Accounts-Table		acc_col_width = 56.693; // accounts column width -> 20 mm		all_col_width = false; // make all columns of equal width -> false		custom_colwidths = ""; // custom column widths -> not set		h_depth = 2; // how many rows deep is the header -> 2		e_row_index = 0; // assign empty rows cell style -> No		s_settings = false; // save settings unchecked 	}	// create a dialog box	var myDialog = app.dialogs.add(	{		name: "Table Settings",		canCancel: true	});	// add input fields	with ( myDialog.dialogColumns.add() )	{		with ( borderPanels.add() )		{			staticTexts.add({ staticLabel: "Table style:" });			tableStyle = dropdowns.add({				stringList: ["Accounts-Table", "Text-Table"],				selectedIndex: t_style_index			});		}		with ( borderPanels.add() )		{			staticTexts.add({ staticLabel: "Acounts columns width:" });			accColWidth = measurementEditboxes.add(			{				editValue: acc_col_width,				editUnits: MeasurementUnits.MILLIMETERS			});			allColWidth = checkboxControls.add({				staticLabel: "All columns equal",				checkedState: all_col_width			});		}		with ( borderPanels.add() )		{			staticTexts.add({ staticLabel: "Custom column widths in mm separated by /" });			customColWidths = textEditboxes.add(			{				editContents: custom_colwidths,				minWidth: 300			});		}		with ( borderPanels.add() )		{			staticTexts.add({ staticLabel: "Header rows count:" });			headerDepth = integerEditboxes.add(			{				editValue: h_depth			});		}		with ( borderPanels.add() )		{			staticTexts.add({ staticLabel: "Assign EmptyRow cell style:" });			emptyRowSettings = dropdowns.add({				stringList: ["No", "Yes"],				selectedIndex: e_row_index			});		}		with ( borderPanels.add() )		{			saveSettings = checkboxControls.add({				staticLabel: "Save as default",				checkedState: s_settings			});		}	}	// Display the dialog box	var myResult = myDialog.show();	// Check if setting have been set	if ( myResult == true )	{		checkUserSelection();	}	else	{		// if user cancels the script		myDialog.destroy();	}}function checkUserSelection(){	var a_table = checkWhichTable();	if ( a_table == null )	{		if ( confirm("No table selected. Do you want to process *all* tables?") == false )		{			return;		}					allTables = app.activeDocument.stories.everyItem().tables.everyItem().getElements();				for ( aTable=0; aTable<allTables.length; aTable++ )		{			processTable (allTables[aTable]);		}	}	else	{		processTable (a_table);	}}function checkWhichTable(){	// ensure the user made a selection	if (app.selection.length != 1)	{		return null;	}	var currentTable = app.selection[0];	if (currentTable.hasOwnProperty("baseline"))	{		currentTable = app.selection[0].parent;	}	while (currentTable instanceof Cell || currentTable instanceof Row || currentTable instanceof Column)	{		currentTable = currentTable.parent;	}	if (!(currentTable instanceof Table))	{		// No table selected		return null;	}	return currentTable;}function processTable(table){	changeUnitsToPoints();	// step 1: assign table defaults	assignTableDefaults(table);	// step 2: create header	createHeader( table );	// step 3: assign cell styles to empty rows	processEmptyRows( table );	// step 4: set the width of the accounts columns	setColWidth( table );		changeUnitsBack();}function setColWidth(table){	total_columns = table.columns.length;	frame_width = table.parent.geometricBounds[3] - table.parent.geometricBounds[1];	// check if custom columns widths have been defined	if( customColWidths.editContents !== "" )	{		columns = customColWidths.editContents.split('/');		auto_columns = 0;		set_columns = 0;		for( i = 0; i < columns.length; i++ )		{			if( columns[i] === "auto" )			{				// column width to be calculated automatically				auto_columns = auto_columns + 1;			}			else			{				set_columns = set_columns + Number( columns[i] );			}		}		// calculate single auto column width		auto_col_width = (frame_width - (set_columns * 2.83465 )) / auto_columns;		// replace value in widths array		for( i = 0; i < columns.length; i++ )		{			if( columns[i] == "auto" )			{				table.columns[i].width = auto_col_width;			}			else			{				table.columns[i].width = Number( columns[i] ) * 2.83465;			}		}			}	else	{		// Check if all columns are the same width		if ( allColWidth.checkedState )		{			col_width = frame_width / total_columns;			left_col_width = col_width;		}		else		{			col_width = accColWidth.editValue;			left_col_width = frame_width - ( col_width * ( total_columns - 1 ) );		}		// set the width for the first column		table.columns[0].width = left_col_width;		// set the width for the accounts columns		for ( i = 1; i < total_columns; i++ )		{			table.columns[i].width = col_width;		}	}}function assignTableDefaults(table){	// check if the appropriate table and cell styles exist, create them if not	// checkTableStyles();		// clear all cell style overrides	table.cells.everyItem().clearCellStyleOverrides(true);	// set minimum height for all rows	table.rows.everyItem().minimumHeight = 5.66929; // 2mm	// assign table style, this assigns "Base-Cell" for body cells and "Header" for header cells	// at this point all cells in the table are "Base Cells" -> and they all use the "Accounts" pStyle	table.appliedTableStyle = tableStyle.stringList[tableStyle.selectedIndex];	// assign styles to all body rows	for( i = ( table.rows.length - 1 ); i >= headerDepth.editValue; i-- )	{		// Assign "BaseCell" style to all cells		table.rows[i].cells.everyItem().appliedCellStyle = "Base-Cell";		// Check if all columns are set to left aligned		if ( tableStyle.selectedIndex == 1 ) // yes		{			table.rows[i].cells.everyItem().paragraphs.everyItem().appliedParagraphStyle = "Normal";			table.rows[i].cells.everyItem().appliedCellStyle = "Text-Cell";		}		else // no		{			// Find left hand cells and assign the "TextBodyCopy" pStyle			table.rows[i].cells.firstItem().paragraphs.everyItem().appliedParagraphStyle = "Normal";			// Assign "AccountsBracket" pStyle			for( j = 1; j < table.rows[i].cells.length; j++ )			{				if ( table.rows[i].cells[j].contents.indexOf("(") != -1 )				{					table.rows[i].cells[j].paragraphs.everyItem().appliedParagraphStyle = "Accounts-Bracket";				}				else				{					table.rows[i].cells[j].paragraphs.everyItem().appliedParagraphStyle = "Accounts";				}			}		}	}}function createHeader( table ){	for( i = 0; i < headerDepth.editValue; i++ )	{		if ( table.rows[i].rowType != 1162375799 )		{			table.rows[i].rowType = 1162375799;		}		// assign "HeaderCell" cell type to first row		table.rows[i].cells.everyItem().appliedCellStyle = "Header";		// Check if all columns are set to left aligned		if ( tableStyle.selectedIndex == 1 ) // yes		{			// change the justification to "left" in all cells			table.rows[i].cells.everyItem().paragraphs.everyItem().justification = 1818584692;		}		else // no		{			// change the justification to "left" in the first cell			table.rows[i].cells.firstItem().paragraphs.everyItem().justification = 1818584692;		}	}}function processEmptyRows( table ){		if ( emptyRowSettings.selectedIndex == 1 )	{		// check if all rows under header is empty and assign "EmptyRow" cell style		for( i = ( table.rows.length - 1 ); i >= headerDepth.editValue; i-- )		{			var k = 0;			var emptyRow = true;			while ( k < table.rows[i].cells.length )			{				var cellContents = String( table.rows[i].cells[k].contents );								if ( checkEmptyCell(cellContents) )				{					emptyRow = false;					break;				}								k++;			}			if( emptyRow )			{				table.rows[i].cells.everyItem().appliedCellStyle = "Empty-Row";			}		}	}}function checkEmptyCell( cellContents ){	var pattern = /[\S]/;		if( cellContents.match( pattern ) )  	{  		return true;  	}  	else  	{  		return false;  	}	}function checkTableStyles(){		/*		TBD: Check Paragraph Styles "Normal", "Accounts", "Accounts-Bracket", "Table-Headings"	*/	// check if "Base-Cell" style exist, create if not and assign	try	{		myCellStyle = document.cellStyles.item("Base-Cell");		// if the style doesn't exist the script will generate an error		myName = myCellStyle.name;	}	catch (myError)	{		myCellStyle = document.cellStyles.add({			name: "Base-Cell",			topEdgeStrokeWeight: 0,			rightEdgeStrokeWeight: 0,			bottomEdgeStrokeWeight: 0,			leftEdgeStrokeWeight: 0,			topInset: 2.5,			rightInset: 0,			bottomInset: 3.5,			leftInset: 0,			appliedParagraphStyle: "Accounts"		});	}	// check if "Header" style exist, create if not and assign	try	{		myCellStyle = document.cellStyles.item("Header");		// if the style doesn't exist the script will generate an error		myName = myCellStyle.name;	}	catch (myError)	{		myCellStyle = document.cellStyles.add({			name: "Header",			basedOn: document.cellStyles.item("Base-Cell"),			appliedParagraphStyle: "Table-Headings"		});	}	// check if "Empty-Row" style exist, create if not and assign	try	{		myCellStyle = document.cellStyles.item("Empty-Row");		// if the style doesn't exist the script will generate an error		myName = myCellStyle.name;	}	catch (myError)	{		myCellStyle = document.cellStyles.add({			name: "Empty-Row",			basedOn: document.cellStyles.item("Base-Cell"),			topInset: 0,			bottomInset: 0		});	}	// check if "Light-Line" style exist, create if not and assign	try	{		myCellStyle = document.cellStyles.item("Light-Line");		// if the style doesn't exist the script will generate an error		myName = myCellStyle.name;	}	catch (myError)	{		myCellStyle = document.cellStyles.add({			name: "Light-Line",			basedOn: document.cellStyles.item("Base-Cell"),			bottomEdgeStrokeWeight: .25,			bottomEdgeStrokeColor: document.swatches.item("Black"),			bottomEdgeStrokeOverprint: true,			bottomEdgeStrokeType: "Solid",			bottomEdgeStrokeTint: 100		});	}	// check if "Heavy-Line" style exist, create if not and assign	try	{		myCellStyle = document.cellStyles.item("Heavy-Line");		// if the style doesn't exist the script will generate an error		myName = myCellStyle.name;	}	catch (myError)	{		myCellStyle = document.cellStyles.add({			name: "Heavy-Line",			basedOn: document.cellStyles.item("Base-Cell"),			bottomEdgeStrokeWeight: 1,			bottomEdgeStrokeColor: document.swatches.item("Black"),			bottomEdgeStrokeOverprint: true,			bottomEdgeStrokeType: "Solid",			bottomEdgeStrokeTint: 100		});	}	// check if "Base-Table" style exist, create if not and assign	try	{		myTableStyle = document.tableStyles.item("Base-Table");		// if the style doesn't exist the script will generate an error		myName = myTableStyle.name;	}	catch (myError)	{		myTableStyle = document.tableStyles.add({			name: "Base-Table",			spaceAfter: 0,			spaceBefore: 0,			topBorderStrokeWeight: 0,			rightBorderStrokeWeight: 0,			bottomBorderStrokeWeight: 0,			leftBorderStrokeWeight: 0,			bodyRegionCellStyle: document.cellStyles.item("Base-Cell"),			headerRegionCellStyle: document.cellStyles.item("Header")		});	}	}